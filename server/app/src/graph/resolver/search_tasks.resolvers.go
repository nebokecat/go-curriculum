package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"bst-tech/program/graph"
	"bst-tech/program/infra/boiler"
	"context"
	"database/sql"
	"fmt"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// SearchTasks is the resolver for the searchTasks field.
func (r *queryResolver) SearchTasks(ctx context.Context, input *graph.SearchTaskInput) (*graph.SearchTasksOutput, error) {
	db, err := sql.Open("postgres", "host=postgres user=tech password=secret dbname=tech sslmode=disable")
	if err != nil {
		return nil, err
	}

	var queries []qm.QueryMod

	if input.Name != nil && input.Description != nil {
		queries = append(queries, qm.Where("name LIKE ? OR description ILIKE ?", fmt.Sprintf("%%%s%%", *input.Name), fmt.Sprintf("%%%s%%", *input.Description)))
	} else if input.Name != nil {
		queries = append(queries, qm.Where("name LIKE ?", fmt.Sprintf("%%%s%%", *input.Name)))
	} else if input.Description != nil {
		queries = append(queries, qm.Where("description LIKE ?", fmt.Sprintf("%%%s%%", *input.Description)))
	}
	
	tasks, err := boiler.Tasks(queries...).All(ctx, db)
	if err != nil {
		return nil, err
	}

	var result []*graph.SearchTask
	for _, task := range tasks {
		result = append(result, &graph.SearchTask{
			ID:          int(task.ID),
			Name:        task.Name,
			Description: task.Description.Ptr(),
			Priority:    task.Priority.Ptr(),
		})
	}

	output := &graph.SearchTasksOutput{
		SearchTasks: result,
	}

	return output, nil
}
