package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"bst-tech/program/graph"
	"bst-tech/program/infra/boiler"
	"context"
	"database/sql"

	_ "github.com/lib/pq"
	null "github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input graph.CreateTaskInput) (*graph.CreateTaskOutput, error) {
	// 引数取得
	name := input.Name
	description := input.Description

	db, err := sql.Open("postgres", "host=postgres user=tech password=secret dbname=tech sslmode=disable")
	if err != nil {
		return nil, err
	}

	// boiler介してtasksにinsertする
	task := boiler.Task{
		Name:        name,
		Description: null.StringFromPtr(description),
	}
	err = task.Insert(ctx, db, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &graph.CreateTaskOutput{
		ID:          int(task.ID),
		Name:        task.Name,
		Description: task.Description.Ptr(),
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
