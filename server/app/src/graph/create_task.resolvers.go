package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"bst-tech/program/graph/model"
	"bst-tech/program/infra/boiler"
	"context"
	"database/sql"

	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	_ "github.com/lib/pq"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.CreateTaskOutput, error) {
	// 引数取得
	name := input.Name
	descrption := input.Description
	
	db, err := sql.Open("postgres", "dbname=tech user=tech port=5432 host=127.0.0.1 sslmode=disable")
	if err != nil{
		return nil,err
	}
	
	// boiler介してtasksにinsertする
	task := boiler.Task{
		Name: null.StringFrom(name),
		Description: null.StringFromPtr(descrption),
	}
	err = task.Insert(ctx, db, boil.Infer())
	if err != nil{
		return nil,err
	}
	
	// id,name,description→boilerから返ってきたやつを
	
	// id := 
	
	return &model.CreateTaskOutput{
		ID: int(task.ID),
		Name: task.Name.String,
		Description: task.Description.Ptr(),
	},nil
	
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
